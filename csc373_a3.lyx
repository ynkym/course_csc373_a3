#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 0.5in
\topmargin 0.5in
\rightmargin 0.5in
\bottommargin 0.5in
\headheight 0.5in
\headsep 0.5in
\footskip 0.5in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CSC373 - Assignment 3
\end_layout

\begin_layout Author
Minh Le Hoang - Student number : 999 01 9930 | Yorie Nakayama - Student
 number: 998 72 9951 
\end_layout

\begin_layout Enumerate
)
\end_layout

\begin_deeper
\begin_layout Enumerate
Verification algorithm:
\end_layout

\begin_deeper
\begin_layout Itemize
High-level idea behind:
\end_layout

\begin_deeper
\begin_layout Standard
Giving graph 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 in form of adjacency matrix and certificate which is the mapping function
 
\begin_inset Formula $f$
\end_inset

 .
\end_layout

\begin_layout Standard
\begin_inset Formula $f$
\end_inset

 is an array having 
\begin_inset Formula $|V(G)|$
\end_inset

 elements and 
\begin_inset Formula $f[u]=f(u)$
\end_inset


\end_layout

\begin_layout Standard
The vertifier will check if the function will do the mapping properly such
 that for all 
\begin_inset Formula $vu\in E(G)$
\end_inset

, 
\begin_inset Formula $f(v)f(u)\in E(H)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Pseudo-code
\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize
V(G,H,f):
\end_layout

\begin_deeper
\begin_layout Quote
For 
\begin_inset Formula $u\in V(G)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Quote
For 
\begin_inset Formula $v\in V(G)\backslash u$
\end_inset


\end_layout

\begin_deeper
\begin_layout Quote
If 
\begin_inset Formula $uv\in E(G)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Quote
If 
\begin_inset Formula $f(u)f(v)\notin E(H)$
\end_inset

 then Return false 
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Quote
Return true
\end_layout

\end_deeper
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Input size.
\end_layout

\begin_deeper
\begin_layout Standard
Because the 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 are in the form of adjacency matrix, the input size is space required for
 the two graphs, which is 
\begin_inset Formula $n=\Theta(|V(G)|^{2}+|V(H)|^{2})$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Size of certificate
\end_layout

\begin_deeper
\begin_layout Standard
The mapping function 
\begin_inset Formula $f$
\end_inset

 needs to be encoded into the certificate.
\end_layout

\begin_layout Standard
Then the size of the certificate is 
\begin_inset Formula $O(|V(G)|)$
\end_inset

 because it is an array with 
\begin_inset Formula $|V(G)|\in O(\sqrt{n})$
\end_inset

 elements.
\end_layout

\end_deeper
\begin_layout Enumerate
Verifier running time.
\end_layout

\begin_deeper
\begin_layout Standard
Assume that the mapping by function 
\begin_inset Formula $f$
\end_inset

 takes constant time because it's an array lookup.
 Checking if an edge is in the graph or not also takes constant time by
 lookup in adjacency matrix.
 Then the total running time of the vertifier is 
\begin_inset Formula $O(|V(G)|^{2})\in O(n)$
\end_inset

 because we are doing constant-time checking in every pair of vertices in
 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Why the vertifier works ?
\end_layout

\begin_deeper
\begin_layout Standard
Assume 
\begin_inset Formula $<G,H>\in GraphHomo$
\end_inset

, then there is function 
\begin_inset Formula $f:V(G)\rightarrow V(H)$
\end_inset

 so that for all 
\begin_inset Formula $vu\in E(G)$
\end_inset

, 
\begin_inset Formula $f(v)f(u)\in E(H)$
\end_inset

.
 Then when given 
\begin_inset Formula $G,H,f$
\end_inset

, there doesn't exist any two nodes 
\begin_inset Formula $u,v\in V(G)$
\end_inset

 so that 
\begin_inset Formula $uv\in E(G)$
\end_inset

 and 
\begin_inset Formula $f(u)f(v)\notin E(H)$
\end_inset

 to make the vertifier return false.
 Then the vertifier will return True .
 Then there exists a certificate for this pair of graphs, so the vertifier
 will accept it.
\end_layout

\begin_layout Standard
Assume 
\begin_inset Formula $<G,H>\notin GraphHomo$
\end_inset

, then there is no function 
\begin_inset Formula $f:V(G)\rightarrow V(H)$
\end_inset

 so that for all 
\begin_inset Formula $vu\in E(G)$
\end_inset

, 
\begin_inset Formula $f(v)f(u)\in E(H)$
\end_inset

.
 This is equivalent to for all function 
\begin_inset Formula $f:V(G)\rightarrow V(H)$
\end_inset

, there exists some 
\begin_inset Formula $vu\in E(G)$
\end_inset

 such that 
\begin_inset Formula $f(v)f(u)\notin E(H)$
\end_inset

.
 Then for the input 
\begin_inset Formula $G,H$
\end_inset

, for any function 
\begin_inset Formula $f$
\end_inset

, the verifier given 
\begin_inset Formula $G,H,f$
\end_inset

 will always find two nodes 
\begin_inset Formula $u,v\in V(G)$
\end_inset

 so that 
\begin_inset Formula $uv\in E(G)$
\end_inset

 and 
\begin_inset Formula $f(u)f(v)\notin E(H)$
\end_inset

, hence returning False.
 Then there is no certificate that the verifier will accept.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
)
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $GraphHomoExt$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
Input: two graphs 
\begin_inset Formula $G,H$
\end_inset

, and a function
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $f:S\subseteq V(G)\rightarrow V(H)$
\end_inset


\end_layout

\begin_layout Itemize
Output: True if there exists some function 
\begin_inset Formula $f':V(G)\rightarrow V(H)$
\end_inset

 such that if 
\begin_inset Formula $v\in S\implies f'(v)=f(v)$
\end_inset

 and 
\begin_inset Formula $<G,H,f'>$
\end_inset

 is accepted by the 
\begin_inset Formula $GraphHomo$
\end_inset

 verifier, and False otherwise.
 Intuitively, it will accept if halfway-defined mapping of vertices in G
 to vertices in H could be extended to the homomorphism of G to H, or the
 full mapping f' such that for all 
\begin_inset Formula $vu\in E(G)$
\end_inset

, 
\begin_inset Formula $f'(v)f'(u)\in E(H)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Reduction from 
\begin_inset Formula $GraphHomo$
\end_inset

 to 
\begin_inset Formula $GraphHomoExt$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Given input 
\begin_inset Formula $<G,H>$
\end_inset

 to 
\begin_inset Formula $GraphHomo$
\end_inset

, compute 
\begin_inset Formula $GraphHomoExt$
\end_inset

 on input 
\begin_inset Formula $<G,H,f>$
\end_inset

 where 
\begin_inset Formula $f$
\end_inset

 is an empty function, or is undefined, and return True iff 
\begin_inset Formula $GraphHomoExt$
\end_inset

 returns True.
 The reduction takes constant time.
\end_layout

\end_deeper
\begin_layout Enumerate
Reduction correctness
\end_layout

\begin_deeper
\begin_layout Standard
Since the empty function 
\begin_inset Formula $f$
\end_inset

 does not limit any mappings from 
\begin_inset Formula $V(G)$
\end_inset

 to 
\begin_inset Formula $V(H)$
\end_inset

, any valid mapping function 
\begin_inset Formula $f':V(G)\rightarrow V(H)$
\end_inset

 for homomorphism of 
\begin_inset Formula $G$
\end_inset

 to 
\begin_inset Formula $H$
\end_inset

 is an extension of 
\begin_inset Formula $f$
\end_inset

.
\end_layout

\begin_layout Standard
Then if such 
\begin_inset Formula $f'$
\end_inset

 exists, or if 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $<G,H>$
\end_inset

 is accepted by 
\begin_inset Formula $GraphHomo$
\end_inset

,
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 
\begin_inset Formula $GraphHomoExt$
\end_inset

 will also accept 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $<G,H,f>$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $<G,H>$
\end_inset

 is not accepted by 
\begin_inset Formula $GraphHomo$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
, then there is no such 
\begin_inset Formula $f'$
\end_inset

to extend 
\begin_inset Formula $f$
\end_inset

 into, therefore 
\begin_inset Formula $GraphHomoExt$
\end_inset

 will also not accept 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $<G,H,f>$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Reduction from 
\begin_inset Formula $GraphHomoExt$
\end_inset

 to 
\begin_inset Formula $GraphHomo$
\end_inset


\end_layout

\begin_layout Enumerate
Reduction correctness
\end_layout

\end_deeper
\begin_layout Enumerate
)
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $GraphHomoSearch$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
Input: two graphs 
\begin_inset Formula $<G,H>$
\end_inset


\end_layout

\begin_layout Itemize
Output: 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $f:V(G)\rightarrow V(H)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 such that for all 
\begin_inset Formula $vu\in E(G)$
\end_inset

, 
\begin_inset Formula $f(v)f(u)\in E(H)$
\end_inset

.
 In otherwords, we want to find mapping 
\begin_inset Formula $f$
\end_inset

 of 
\begin_inset Formula $V(G)$
\end_inset

 to 
\begin_inset Formula $V(H)$
\end_inset

 such that the verifier of 
\begin_inset Formula $GraphHomo$
\end_inset

 will accept 
\begin_inset Formula $<G,H,f>$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Reduction from 
\begin_inset Formula $GraphHomoSearch$
\end_inset

 to 
\begin_inset Formula $GraphHomoExt$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
High-level idea behind:
\end_layout

\begin_deeper
\begin_layout Standard
Start with empty function 
\begin_inset Formula $f$
\end_inset

.
 Check that a solution exists by computing 
\begin_inset Formula $<G,H,f>$
\end_inset

to 
\begin_inset Formula $GraphHomoExt$
\end_inset

.
 If it rejects, then there is no solution, so return 
\begin_inset Formula $False.$
\end_inset


\end_layout

\begin_layout Standard
If there exists a solution, we will find one by building the solution vertex-by-
vertex.
 For each vertex 
\begin_inset Formula $v\in E(G)$
\end_inset

, guess its mapping to some vertex 
\begin_inset Formula $u\in E(H)$
\end_inset

 and define 
\begin_inset Formula $f(v)=u$
\end_inset

.
 Compute 
\begin_inset Formula $GraphHomoExt$
\end_inset

 on 
\begin_inset Formula $<G,H,f>$
\end_inset

 and if it accepts, continue to next vertex in 
\begin_inset Formula $G$
\end_inset

.
 Otherwise, pick another vertex 
\begin_inset Formula $w\in H$
\end_inset

 and re-define 
\begin_inset Formula $f(v)=w$
\end_inset

 to try again until 
\begin_inset Formula $GraphHomoExt$
\end_inset

 accepts 
\begin_inset Formula $<G,H,f>$
\end_inset

.
 We will eventually find one because we will keep the loop invariant 
\begin_inset Formula $GraphHomoExt$
\end_inset

 accepts 
\begin_inset Formula $<G,H,f>$
\end_inset

 at the end of each loop.
\end_layout

\begin_layout Standard
The algorithm takes worst-case 
\begin_inset Formula $O(|V(G)||V(H)|)$
\end_inset

 time with 
\begin_inset Formula $O(|V(G)||V(H)|)$
\end_inset

 calls to 
\begin_inset Formula $GraphHomoExt$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Pseudo-code
\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize
GraphHomoSearch(G,H):
\end_layout

\begin_deeper
\begin_layout Quote
\begin_inset Formula $f\leftarrow$
\end_inset

empty function
\end_layout

\begin_layout Quote
if 
\begin_inset Formula $GraphHomoExt(G,H,f)$
\end_inset

 == False then return False
\end_layout

\begin_layout Quote
For 
\begin_inset Formula $u\in V(G)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Quote
For 
\begin_inset Formula $v\in V(H)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Quote
Define 
\begin_inset Formula $f(u)=v$
\end_inset


\end_layout

\begin_layout Quote
If 
\begin_inset Formula $GraphHomoExt(G,H,f)$
\end_inset

 ==True then continue
\end_layout

\end_deeper
\end_deeper
\begin_layout Quote
Return 
\begin_inset Formula $f$
\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Correctness
\end_layout

\begin_deeper
\begin_layout Standard
By Q2)b), the first check on 
\begin_inset Formula $GraphHomoExt(G,H,f)$
\end_inset

 will determine if it is possible at all to find a mapping for homomorphism
 of 
\begin_inset Formula $G$
\end_inset

 to 
\begin_inset Formula $H$
\end_inset

.
 If it rejects, then 
\begin_inset Formula $GraphHomoSearch$
\end_inset

 will also fail and reject.
 If it accepts, we know there exists some 
\begin_inset Formula $f'$
\end_inset

 such that the verifier for 
\begin_inset Formula $GraphHomo$
\end_inset

 accepts 
\begin_inset Formula $<G,H,f'>$
\end_inset

.
\end_layout

\begin_layout Standard
Every iteration of outer loop will build 
\begin_inset Formula $f$
\end_inset

 vertex-by-vertex.
 We want to show by induction that 
\begin_inset Formula $f$
\end_inset

 always can be extended to some 
\begin_inset Formula $f'$
\end_inset

 such that the verifier for 
\begin_inset Formula $GraphHomo$
\end_inset

 accepts 
\begin_inset Formula $<G,H,f'>$
\end_inset

, or in other words 
\begin_inset Formula $GraphHomoExt$
\end_inset

 accepts 
\begin_inset Formula $<G,H,f>$
\end_inset

.
\end_layout

\begin_layout Standard
Base Case: when 
\begin_inset Formula $f$
\end_inset

 is empty function, we have verified in the beginning that 
\begin_inset Formula $GraphHomoExt(G,H,f)$
\end_inset

 is accepted.
\end_layout

\begin_layout Standard
Inductive hypothesis: At the end of previous loop, 
\begin_inset Formula $GraphHomoExt(G,H,f)$
\end_inset

 is accepted.
\end_layout

\begin_layout Standard
Inductive Step: For the chosen vertex 
\begin_inset Formula $u\in V(G)$
\end_inset

, we are trying every combination with 
\begin_inset Formula $v\in V(H)$
\end_inset

.
 We know that there must exist some combination that works because otherwise
 it means that 
\begin_inset Formula $f$
\end_inset

 from previous loop cannot be extended to valid homomorphism of 
\begin_inset Formula $G$
\end_inset

 to 
\begin_inset Formula $H$
\end_inset

, contradicting the inductive hypothesis.
 Eventually we will find definition of 
\begin_inset Formula $f(u)$
\end_inset

 such that 
\begin_inset Formula $GraphHomoExt(G,H,f)$
\end_inset

 is accepted, and we continue to next loop, satisfying the hypothesis.
\end_layout

\begin_layout Standard
At the end of the loop, 
\begin_inset Formula $f(u)$
\end_inset

 is defined for every 
\begin_inset Formula $u\in V(G)$
\end_inset

 and 
\begin_inset Formula $GraphHomoExt$
\end_inset

 accepts 
\begin_inset Formula $<G,H,f>$
\end_inset

.
 Since there is no more to define in 
\begin_inset Formula $f$
\end_inset

, this is equivalent to verifier of 
\begin_inset Formula $GraphHomo$
\end_inset

 accepting 
\begin_inset Formula $<G,H,f>$
\end_inset

.
 
\begin_inset Formula $GraphHomoSearch$
\end_inset

 correctly returns 
\begin_inset Formula $f$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Reduction from 
\begin_inset Formula $GraphHomoExt$
\end_inset

 to 
\begin_inset Formula $GraphHomoSearch$
\end_inset


\end_layout

\begin_layout Enumerate
Correctness
\end_layout

\end_deeper
\begin_layout Enumerate
) to be filled
\end_layout

\begin_layout Enumerate
)
\end_layout

\begin_deeper
\begin_layout Standard
Giving
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 be two graphs with set of nodes 
\begin_inset Formula $V(G)$
\end_inset

 and 
\begin_inset Formula $V(H)$
\end_inset

 and sets of edges 
\begin_inset Formula $E(G)$
\end_inset

 and 
\begin_inset Formula $E(H)$
\end_inset

.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $E_{G-u-v}$
\end_inset

 is a boolean value so that with 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $u\in V(G)$
\end_inset

 and 
\begin_inset Formula $v\in V(G)$
\end_inset

 then 
\begin_inset Formula $uv\in E(G)\iff E_{G-u-v}$
\end_inset

 is true.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $E_{H-k_{1}-k_{2}}$
\end_inset

 is a boolean value so that with 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $k_{1}\in V(G)$
\end_inset

 and 
\begin_inset Formula $k_{2}\in V(G)$
\end_inset

 then 
\begin_inset Formula $k_{1}k_{2}\in E(H)\iff E_{H-k_{1}-k_{2}}$
\end_inset

 is true
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $mapNode_{u-k}$
\end_inset

 is a boolean variable so that with 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $u\in V(G)$
\end_inset

 and 
\begin_inset Formula $k\in V(H)$
\end_inset

 then 
\begin_inset Formula $f$
\end_inset

 maps 
\begin_inset Formula $u$
\end_inset

 to 
\begin_inset Formula $k$
\end_inset

 
\begin_inset Formula $\iff mapNode_{u-k}$
\end_inset

 is true.
\end_layout

\begin_layout Standard
Let define 
\begin_inset Formula $mapping_{u}$
\end_inset

 is boolean formula so that function 
\begin_inset Formula $f$
\end_inset

 maps node 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $u\in V(G)$
\end_inset

 to only one node 
\begin_inset Formula $k\in V(H)\iff mapping_{u}$
\end_inset

 is true.
 Then
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 
\end_layout

\begin_layout Standard
\begin_inset Formula $mapping_{u}=\bigvee_{k\in V(H)}\left(\left(\bigwedge_{k_{2}\in V(H)\backslash k}\left(\overline{mapNode_{u-k_{2}}}\right)\right)\wedge mapNode_{u-k}\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Then every 
\begin_inset Formula $mapping_{u}$
\end_inset

 has 
\begin_inset Formula $|V(H)|*|V(H)|$
\end_inset

 literals
\end_layout

\begin_layout Standard
Let define 
\begin_inset Formula $MAPPING$
\end_inset

 is a boolean formula so that function 
\begin_inset Formula $f:V(G)\rightarrow V(H)$
\end_inset

 is a many to one function if and only if 
\begin_inset Formula $MAPPING$
\end_inset

 is true.
 Then
\end_layout

\begin_layout Standard
\begin_inset Formula $MAPPING=\bigwedge_{u\in V(G)}\left(mapping_{u}\right)$
\end_inset


\end_layout

\begin_layout Standard
Then 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $MAPPING$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 has 
\begin_inset Formula $|V(H)|^{2}*|V(G)|$
\end_inset

 literals.
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Let 
\begin_inset Formula $preservingEdge_{u-v-k_{1}-k_{2}}$
\end_inset

 be a formula so that 
\begin_inset Formula $preservingEdge_{u-v-k_{1}-k_{2}}$
\end_inset

 is true if and only if with 
\begin_inset Formula $u,v\in V(G)$
\end_inset

 and 
\begin_inset Formula $k_{1},k_{2}\in V(H)$
\end_inset

 and 
\begin_inset Formula $f$
\end_inset

 maps 
\begin_inset Formula $u$
\end_inset

 to 
\begin_inset Formula $k_{1}$
\end_inset

 and 
\begin_inset Formula $f$
\end_inset

 maps 
\begin_inset Formula $v$
\end_inset

 to 
\begin_inset Formula $k_{2}$
\end_inset

 if 
\begin_inset Formula $uv\in E(G)\rightarrow k_{1}k_{2}\in E(H)$
\end_inset

 .
 Then
\end_layout

\begin_layout Standard
\begin_inset Formula $preservingEdge_{u-v-k_{1}-k_{2}}=\left(mapNode_{u-k_{1}}\wedge mapNode_{v-k_{2}}\wedge E_{G-u-v}\right)\rightarrow E_{H-k_{1}-k_{2}}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $=\overline{\left(mapNode_{u-k_{1}}\wedge mapNode_{v-k_{2}}\wedge E_{G-u-v}\right)}\vee E_{H-k_{1}-k_{2}}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $=\overline{mapNode_{u-k_{1}}}\vee\overline{mapNode_{v-k_{2}}}\vee\overline{E_{G-u-v}}\vee E_{H-k_{1}-k_{2}}$
\end_inset

.
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Then for every 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula $preservingEdge_{u-v-k_{1}-k_{2}}$
\end_inset

 formula there are only 2 literals
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $PRESERVING\_EDGE$
\end_inset

 is a formula so that 
\begin_inset Formula $PRESERVING\_EDGE$
\end_inset

 is True if 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\forall u,v\in V(G).\forall k_{1},k_{2}\in V(H).\left[\left(f\: maps\: u\: to\: k_{1}\right)\wedge\left(f\: maps\: v\: to\: k_{2}\right)\wedge\left(uv\in E(G)\right)\right]\rightarrow\left(k_{1}k_{2}\in E(H)\right)$
\end_inset

.
 Then 
\end_layout

\begin_layout Standard
\begin_inset Formula $PRESERVING\_EDGE=\bigwedge_{u\in V(G)}\left(\bigwedge_{v\in V(G)\backslash u}\left(\bigwedge_{k_{1}\in V(H)}\left(\bigwedge_{k_{2}\in V(H)\backslash k_{1}}\left[preservingEdge_{u-v-k_{1}-k_{2}}\right]\right)\right)\right)$
\end_inset

.
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Then 
\begin_inset Formula $PRESERVING\_EDGE$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 has 
\begin_inset Formula $|V(G)|*\left(|V(G)|-1\right)*|V(H)|*\left(|V(H)|-1\right)*2$
\end_inset

 literals
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $Homomorphism$
\end_inset

 be a formula so that 
\begin_inset Formula $Homomorphism$
\end_inset

 is true if and only if 
\begin_inset Formula $f:V(G)\rightarrow V(H)$
\end_inset

 is a many to one function and 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\forall u,v\in V(G).\forall k_{1},k_{2}\in V(H).\left[\left(f\: maps\: u\: to\: k_{1}\right)\wedge\left(f\: maps\: v\: to\: k_{2}\right)\wedge\left(uv\in E(G)\right)\right]\rightarrow\left(k_{1}k_{2}\in E(H)\right)$
\end_inset

.
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Then 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula $Homomorphism=PRESERVING\_EDGE\wedge MAPPING$
\end_inset

 .
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Then 
\begin_inset Formula $PRESERVING\_EDGE$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 has 
\begin_inset Formula $\left[|V(G)|*\left(|V(G)|-1\right)*|V(H)|*\left(|V(H)|-1\right)*2\right]+|V(H)|^{2}*|V(G)|$
\end_inset

 literals.
\end_layout

\begin_layout Standard
We have 
\begin_inset Formula $\left[|V(G)|*\left(|V(G)|-1\right)*|V(H)|*\left(|V(H)|-1\right)*2\right]+|V(H)|^{2}*|V(G)|\in O\left(|V(H)|^{2}*|V(G)|^{2}\right)$
\end_inset

 
\end_layout

\begin_layout Standard
Then given 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

,
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula $Homomorphism$
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 can be found in polynomial time.
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Let 
\begin_inset Formula $<G,H>$
\end_inset

 is the string contains all information about graph 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset


\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
If 
\begin_inset Formula $<G,H>\in GraphHomo$
\end_inset

, then 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
then according to the literals we can define a many to one function 
\begin_inset Formula $f:V(G)\rightarrow V(H)$
\end_inset

 so that 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\forall u,v\in V(G).\forall k_{1},k_{2}\in V(H).\left(uv\in E(G)\right)\rightarrow\left(f(u)f(v)\in E(H)\right)$
\end_inset

 or 
\begin_inset Formula $\forall u,v\in V(G).\forall k_{1},k_{2}\in V(H).\left[\left(f(u)=k_{1}\right)\wedge\left(f(v)=k_{2}\right)\wedge\left(uv\in E(G)\right)\right]\rightarrow\left(k_{1}k_{2}\in E(H)\right)$
\end_inset

, then 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula $Homomorphism$
\end_inset

 is satisfiable.
 Then 
\begin_inset Formula $Homomorphism\in SAT$
\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $Homomorphism\in SAT$
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
, then 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula $Homomorphism$
\end_inset

 is satisfiable.
 Then according to the literals we can define a many to one function 
\begin_inset Formula $f:V(G)\rightarrow V(H)$
\end_inset

 so that 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\forall u,v\in V(G).\forall k_{1},k_{2}\in V(H).\left[\left(f(u)=k_{1}\right)\wedge\left(f(v)=k_{2}\right)\wedge\left(uv\in E(G)\right)\right]\rightarrow\left(k_{1}k_{2}\in E(H)\right)$
\end_inset

 or 
\begin_inset Formula $\forall u,v\in V(G).\forall k_{1},k_{2}\in V(H).\left(uv\in E(G)\right)\rightarrow\left(f(u)f(v)\in E(H)\right)$
\end_inset

.
 Then 
\begin_inset Formula $<G,H>\in GraphHomo$
\end_inset


\end_layout

\begin_layout Standard
Then 
\begin_inset Formula $GraphHomo\leq_{p}SAT$
\end_inset

.
\end_layout

\end_deeper
\end_body
\end_document
